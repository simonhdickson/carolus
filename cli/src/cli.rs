use clap::{App, Arg, SubCommand};

pub fn build_cli() -> App<'static, 'static> {
    let app =
        App::new("carolus-cli")
            .version("0.1.0")
            .about("CLI client for Carolus")
            .author("Simon Dickson")
            .arg(Arg::with_name("v")
                .short("v")
                .multiple(true)
                .help("Sets the level of verbosity"))
            .arg(Arg::with_name("host")
                .short("h")
                .env("CAROLUS_SERVER_URL")
                .help("The base URL of the Carolus Server"))
            .subcommand(SubCommand::with_name("completions")
                .about("Generates shell completions")
                .arg(Arg::with_name("shell")
                    .required(true)
                    .takes_value(true)
                    .index(1)
                    .help("Shell type, supported: [zsh,bash,fish,powershell,elvish]")));

    player_subcommand(app)
}

fn player_subcommand(app: App<'static, 'static>) -> App<'static, 'static> {
    app.subcommand(SubCommand::with_name("play")
        .about("Play a video in the player")
        .subcommand(SubCommand::with_name("movie")
            .about("plays a movie")
            .arg(Arg::with_name("title")
                .short("t")
                .required(true)
                .takes_value(true)
                .help("Title of movie to play"))
            .arg(Arg::with_name("year")
                .short("y")
                .takes_value(true)
                .help("Year of movie to play (only used when there are conflicts)")))
        .subcommand(SubCommand::with_name("tv")
            .about("Plays a tv episode")
            .arg(Arg::with_name("title")
                .short("t")
                .required(true)
                .takes_value(true)
                .help("Title of tv show to play"))
            .arg(Arg::with_name("series")
                .short("s")
                .required(true)
                .takes_value(true)
                .help("Series number of tv show to play"))
            .arg(Arg::with_name("episode")
                .short("e")
                .required(true)
                .takes_value(true)
                .help("Episode number of tv show to play"))
            .arg(Arg::with_name("year")
                .short("y")
                .takes_value(true)
                .help("Year of movie to play (only used when there are conflicts)"))))
}